{"version":3,"file":"static/js/724.c3d9e482.chunk.js","mappings":"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","sources":["components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","webpack://react-homework-template/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const initialState = {\r\n    // name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n}\r\n\r\nexport default initialState;\r\n","const fields = {\r\n    // name: {\r\n    //     label: \"User name\",\r\n    //     name: \"name\",\r\n    //     type: \"text\",\r\n    //     placeholder: \"Enter user name\",\r\n    //     required: true,\r\n    // },\r\n    email: {\r\n        label: \"User email\",\r\n        name: \"email\",\r\n        type: \"email\",\r\n        placeholder: \"Enter user email\",\r\n        required: true,\r\n    },\r\n    password: {\r\n        label: \"User password\",\r\n        name: \"password\",\r\n        type: \"password\",\r\n        placeholder: \"Enter user password (min 6 symbols)\",\r\n        required: true,\r\n    }\r\n}\r\n\r\nexport default fields;","import { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport useForm from '../../shared/hooks/useForm';\r\n\r\nimport TextField from \"../../shared/components/TextField/TextField\";\r\n\r\nimport initialState from \"./initialState\";\r\nimport fields from \"./fields\";\r\n\r\nconst LoginForm = ({onSubmit}) => {\r\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\r\n\r\n    // const nameId = useMemo(()=> nanoid(), []);\r\n    const emailId = useMemo(()=> nanoid(), []);\r\n    const passwordId = useMemo(()=> nanoid(), []);\r\n\r\n    const {email, password} = state;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {/* <TextField id={nameId} value={name} handleChange={handleChange} {...fields.name} /> */}\r\n            <TextField id={emailId} value={email} handleChange={handleChange} {...fields.email} />\r\n            <TextField id={passwordId} value={password} handleChange={handleChange} {...fields.password} />\r\n            <button>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n\r\nLoginForm.defaultProps = {\r\n    onSubmit: () => {}\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth/auth-operations\";\r\nimport { isLogin } from \"redux/auth/auth-selectors\";\r\n// import { isLogin } from \"../../redux/auth/auth-selectors\";\r\n// // react-router\r\nimport { Navigate } from \"react-router-dom\";\r\n// // components\r\nimport LoginForm from '../../components/LoginForm/LoginForm'\r\n\r\nexport default function LoginPage() {\r\n  const dispatch = useDispatch();\r\n  const isUserLogin = useSelector(isLogin);\r\n\r\n  const onLogin = (data) => {\r\n    console.log(\"ffff\",data)\r\n      dispatch(login(data));\r\n  }\r\n  if(isUserLogin) {\r\n    return <Navigate to=\"/contacts\" />\r\n  }\r\n    // const dispatch = useDispatch();\r\n    // const isUserLogin = useSelector(isLogin);\r\n  \r\n    // const onLogin = (data) => {\r\n    //   dispatch(login(data));\r\n    // }\r\n  \r\n    // if (isUserLogin) {\r\n    //   return <Navigate to=\"/my-books\" />\r\n    // }\r\n    \r\n    return (\r\n      <div>\r\n        <h1>Login page</h1>\r\n        <LoginForm onSubmit={onLogin} />\r\n      </div>\r\n    )\r\n  }","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__WGoma\",\"field\":\"text-field_field__KkYP5\"};","import PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./text-field.module.css\";\r\n\r\nconst TextField = ({id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern}) => {\r\n    const fullClassName = className ? `${styles.field} ${className}` : styles.field;\r\n\r\n    return (\r\n        <div className={styles.formGroup}>\r\n            {label && <label htmlFor={id}>{label}</label>}\r\n            <input id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} className={fullClassName} placeholder={placeholder} required={required} pattern={pattern} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextField;\r\n\r\nTextField.defaultProps = {\r\n    type: \"text\",\r\n    required: false,\r\n}\r\n\r\nTextField.propTypes = {\r\n    id: PropTypes.string, \r\n    label: PropTypes.string, \r\n    value: PropTypes.string, \r\n    name: PropTypes.string.isRequired, \r\n    handleChange: PropTypes.func.isRequired, \r\n    type: PropTypes.string, \r\n    className: PropTypes.string, \r\n    placeholder: PropTypes.string,  \r\n    required: PropTypes.bool, \r\n    pattern: PropTypes.string,\r\n}","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["email","password","label","name","type","placeholder","required","LoginForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","TextField","id","value","fields","LoginPage","dispatch","useDispatch","useSelector","isLogin","to","data","console","log","login","defaultProps","checked","className","pattern","fullClassName","styles","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}