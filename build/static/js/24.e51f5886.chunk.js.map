{"version":3,"file":"static/js/24.e51f5886.chunk.js","mappings":"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","sources":["components/RegisterForm/initialState.js","components/RegisterForm/fields.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const initialState = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n}\r\n\r\nexport default initialState;","const fields = {\r\n    name: {\r\n        label: \"User name\",\r\n        name: \"name\",\r\n        type: \"text\",\r\n        placeholder: \"Enter user name\",\r\n        required: true,\r\n    },\r\n    email: {\r\n        label: \"User email\",\r\n        name: \"email\",\r\n        type: \"email\",\r\n        placeholder: \"Enter user email\",\r\n        required: true,\r\n    },\r\n    password: {\r\n        label: \"User password\",\r\n        name: \"password\",\r\n        type: \"password\",\r\n        placeholder: \"Enter user password (min 6 symbols)\",\r\n        required: true,\r\n    }\r\n}\r\n\r\nexport default fields;","import { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport useForm from '../../shared/hooks/useForm';\r\n\r\nimport TextField from \"../../shared/components/TextField/TextField\";\r\n\r\nimport initialState from \"./initialState\";\r\nimport fields from \"./fields\";\r\n\r\nconst RegisterForm = ({onSubmit}) => {\r\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\r\n\r\n    const nameId = useMemo(()=> nanoid(), []);\r\n    const emailId = useMemo(()=> nanoid(), []);\r\n    const passwordId = useMemo(()=> nanoid(), []);\r\n\r\n    const {name, email, password} = state;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <TextField id={nameId} value={name} handleChange={handleChange} {...fields.name} />\r\n            <TextField id={emailId} value={email} handleChange={handleChange} {...fields.email} />\r\n            <TextField id={passwordId} value={password} handleChange={handleChange} {...fields.password} />\r\n            <button>Register</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n\r\nRegisterForm.defaultProps = {\r\n    onSubmit: () => {}\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n}\r\n","// import { Navigate } from \"react-router-dom\";\r\n// redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { signup } from 'redux/auth/auth-operations'\r\nimport { isLogin } from 'redux/auth/auth-selectors';\r\n// react-router\r\nimport {Navigate} from \"react-router-dom\";\r\n// // components\r\nimport RegisterForm from '../../components/RegisterForm/RegisterForm'\r\n\r\nexport default function RegisterPage() {\r\n    const dispatch = useDispatch();\r\n    const isUserLogin = useSelector(isLogin);\r\n    const onRegister = (data) => {\r\n        console.log(\"fghjhdsfg11115\",data)\r\n        // const jsonData = JSON.stringify(data)\r\n        // console.log(\"stringify\", jsonData)\r\n        dispatch(signup(data));\r\n    }\r\n\r\n    if(isUserLogin) {\r\n      return <Navigate to=\"/contacts\" /> \r\n    }\r\n    // const isUserLogin = useSelector(isLogin);\r\n  \r\n    // const onRegister = (data) => {\r\n    //   dispatch(signup(data));\r\n    // }\r\n  \r\n    // if (isUserLogin) {\r\n    //   return <Navigate to=\"/my-books\" />\r\n    // }\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Register page</h1>\r\n        <RegisterForm onSubmit={onRegister}/> \r\n      </div>\r\n    )\r\n  }","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__WGoma\",\"field\":\"text-field_field__KkYP5\"};","import PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./text-field.module.css\";\r\n\r\nconst TextField = ({id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern}) => {\r\n    const fullClassName = className ? `${styles.field} ${className}` : styles.field;\r\n\r\n    return (\r\n        <div className={styles.formGroup}>\r\n            {label && <label htmlFor={id}>{label}</label>}\r\n            <input id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} className={fullClassName} placeholder={placeholder} required={required} pattern={pattern} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextField;\r\n\r\nTextField.defaultProps = {\r\n    type: \"text\",\r\n    required: false,\r\n}\r\n\r\nTextField.propTypes = {\r\n    id: PropTypes.string, \r\n    label: PropTypes.string, \r\n    value: PropTypes.string, \r\n    name: PropTypes.string.isRequired, \r\n    handleChange: PropTypes.func.isRequired, \r\n    type: PropTypes.string, \r\n    className: PropTypes.string, \r\n    placeholder: PropTypes.string,  \r\n    required: PropTypes.bool, \r\n    pattern: PropTypes.string,\r\n}","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["name","email","password","label","type","placeholder","required","RegisterForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","nameId","useMemo","nanoid","emailId","passwordId","TextField","id","value","fields","RegisterPage","dispatch","useDispatch","useSelector","isLogin","to","className","data","console","log","signup","defaultProps","checked","pattern","fullClassName","styles","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}