{"version":3,"file":"static/js/10.1f517791.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","redux/contacts/contacts-selectors.js","components/Form/Form.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContacItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Container/Container.styled.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","components/Heading/Heading.styled.jsx","components/Heading/Heading.jsx","redux/filter/filter-selectors.js","pages/MyContactsPage/MyContactsPage.jsx","shared/hooks/useForm.js"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const FormMarcup = styled.form`\n    outline: 2px solid red;\n    position: relative;\n    width: 528px;\n    height: 250px;\n    padding: 40px;\n    background-color: #53c70c;\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    display: flex;\n    flex-direction:column;\n`\nexport const FormLabel = styled.label`\n    color: white;\n`\nexport const FirstInput = styled.input`\n    background-color: #ffbb32;\n    height: 70px;\n    border-radius: 10px;\n    font-size: 40px;\n    font-style: italic;\n    color:white;\n    padding-left: 30px;\n    border-color: white;\n    &:hover,\n    &focus {\n        scale:1.1;\n        margin-top: 4px;\n    }\n`\nexport const SecondInput = styled.input`\n    background-color: #296cf1;\n    height: 70px;\n    border-radius: 10px;\n    border-color: grey;\n    padding-left: 30px;\n    font-size: 40px;\n    font-style: italic;\n    color:white;\n    &:hover,\n    &focus {\n        scale:1.1;\n        margin-top: 4px;\n    }\n`\nexport const FormButton = styled.button`\n    width: 150px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    background-color: gold;\n    color:white;\n    font-weight: 700;\n    font-size: 20px;\n    font-style: italic;\n    border-radius: 6px;\n    border: none;\n\n    &:hover,\n    &:focus {\n        background-color: white;\n        color: gold;\n        scale:1.1;\n    }\n`","export const getContacts = store => store.contacts.items;\nexport const getState = ({ contacts }) => ({\n  loading: contacts.loading,\n  error: contacts.error,\n});\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (filter.length === 0) {\n    return contacts.items;\n  }\n  const normalisedFilter = filter.toLowerCase();\n  const filteredContacts = contacts.items.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    const result = normalizedName.includes(normalisedFilter);\n    return result;\n  });\n  return filteredContacts;\n};\n","import React from 'react';\nimport { useMemo } from \"react\";\nimport { nanoid } from 'nanoid';\nimport { FormMarcup, FormLabel, FirstInput, SecondInput, FormButton } from './Form.styled';\nimport useForm from 'shared/hooks/useForm';\nimport { addContact, isDublicate } from 'redux/contacts/contacts-operation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts} from 'redux/contacts/contacts-selectors';\n\nconst initialState = {\n    name: '',\n    number: '',\n}\n\nexport default function Form() {\n    \n    const inputNameId = useMemo(()=> nanoid(), []);\n    const inputPhoneId = useMemo(()=> nanoid(), []);\n    const contacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch ();\n\n\n    const onSubmit =  (data) => {\n        const action = addContact(data);\n        if(isDublicate(data,contacts)) {\n          return alert(`${data.name} is already in contacts`);\n        }\n        dispatch(action);\n    };\n\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n    const {name, number} = state;\n\n    return (\n        <FormMarcup onSubmit={handleSubmit}>\n            <FormLabel htmlFor={inputNameId}>Name</FormLabel>\n            <FirstInput\n                id={inputNameId}\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n\n            <FormLabel htmlFor={inputPhoneId}>Phone</FormLabel>\n            <SecondInput\n                id={inputPhoneId}\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                onChange={handleChange}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <FormButton type='submit'>Add contact</FormButton>\n        </FormMarcup>\n    )\n}\n","import styled from '@emotion/styled'\n\nexport const ContactsList = styled.ul`\n    outline:2px solid blue;\n    display:flex;\n    justify-content: start;\n    flex-wrap: wrap;\n    list-style:  none;\n    background-color: violet;\n`\n","import styled from '@emotion/styled'\nexport const ContactElement = styled.li`\n    font-size:35px;\n    font-weight: 700;\n    color: greenyellow;\n    /* margin-left: 40px; */\n    display: flex; \n    align-items: center;\n    margin-top: 20px;\n    height: 60px;\n    margin-right: 35px;\n`\nexport const DeletButton = styled.button`\n    margin-left: 20px;\n    background-color: black;\n    color: white;\n    height: 40px;\n    width:80px;\n    font-weight: 700;\n    font-size: 20px;\n    font-style: italic;\n    border-radius: 6px;\n    border: none;\n    &:hover,\n    &:focus {\n        background-color: white;\n        color: greenyellow;\n        scale:1.2;\n    }\n`","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { ContactElement, DeletButton } from './ContacItem.styled'\nimport { removeContact } from 'redux/contacts/contacts-operation';\nimport { useDispatch } from 'react-redux';\n\nexport default function ContactItem({ name, number, id, text }) {\n  const dispatch = useDispatch();\n  const removeOneContact = id => {\n    const action = removeContact(id);\n    dispatch(action);\n  };\n  return (\n    <ContactElement>{name}: {number}<DeletButton onClick={() => { removeOneContact(id) }}>{text}\n    </DeletButton></ContactElement>\n  )\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  // number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { ContactsList } from './ContactList.styled'\nimport ContactItem from '../ContactItem/ContactItem'\n\n\nexport default function ContactList({items }) {\n\n  return (\n    <ContactsList>\n      {items.map(item => (<ContactItem\n        key={item.id}\n        id={item.id}\n        name={item.name}\n        number={item.number}\n        text={\"Delete\"}\n      />))}\n    </ContactsList>\n  )\n}\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape()),\n}","import styled from '@emotion/styled'\n\nexport const FilterBox = styled.div`\n    position:absolute;\n    top:58px;\n    right: 0px;\n    outline: 2px solid green;\n    height:330px;\n    width: 580px;\n    background-color: gold;\n    display:flex;\n    flex-direction: column;\n    border-radius: 4px;\n`\nexport const FormLabel = styled.label `\n    text-align: center;\n    margin-top: 20px;\n    font-size: 30px;\n    font-weight: 700px;\n    color: red;\n`\nexport const FormInput = styled.input`\n    background-color: blue;\n    max-width: 80%;\n    margin-left: 40px;\n    margin-top: 50px;\n    height: 100px;\n    border-radius: 10px;\n    font-size: 40px;\n    font-style: italic;\n    color:white;\n    padding-left: 30px;\n     &:hover,\n    &focus {\n        scale:1.1;\n        margin-top: 50px;\n    }\n`","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { FilterBox, FormLabel, FormInput } from \"./Filter.styled\"\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\n\n\nexport default function Filter({ filterId, filter }) {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { value } = event.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FilterBox>\n      <FormLabel htmlFor={filterId}>Find contacts by name</FormLabel>\n      <FormInput\n        id={filterId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </FilterBox>\n  )\n}\n\nFilter.propTypes = {\n  filterId: PropTypes.string.isRequired,\n  filter: PropTypes.string.isRequired,\n}\n","import styled from '@emotion/styled'\n\nexport const Container = styled.div`\n    max-width: 1200px;\n    margin: 0 auto;\n    outline: 2px solid red;\n    position: relative; \n`\n","import styled from '@emotion/styled'\n\nexport const Title = styled.h1`\n    margin-top: 0;\n    text-align: center;\n    text-transform: uppercase;\n    color: orange;\n`","import { Title } from './Title.styled'\nimport PropTypes from 'prop-types';\n\nexport const TitlePage = ({ text }) => {\n    return <Title>{text}</Title>\n}\n\nTitlePage.propTypes = {\n    text: PropTypes.string.isRequired,\n}","import styled from '@emotion/styled'\n\n\nexport const HeadingStyled = styled.h2`\n    margin-top: 20px;\n    font-size: 24px;\n    line-height: 24px;\n    font-weight: 700;\n    letter-spacing: 0.5px;\n    text-align: center;\n    text-transform: uppercase;\n    color: green;\n`\n","import { HeadingStyled } from './Heading.styled'\nimport PropTypes from 'prop-types';\n\nexport const Heading = ({ text }) => {\n    return <HeadingStyled>{ text }</HeadingStyled>\n}\nHeading.propTypes = {\n    text: PropTypes.string.isRequired,\n}","export const getFilter = store => store.filter;\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport Form from '../../components/Form/Form';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport { Container } from '../../components/Container/Container.styled';\r\nimport { TitlePage } from '../../components/Title/Title';\r\nimport { Heading } from '../../components/Heading/Heading';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from 'redux/filter/filter-selectors';\r\nimport {getState, getFilteredContacts,} from 'redux/contacts/contacts-selectors';\r\nimport { fetchContacts } from 'redux/contacts/contacts-operation';\r\n\r\nconst MyContactsPage = () =>{\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const { loading, error } = useSelector(getState);\r\n  const filter = useSelector(getFilter);\r\n  const filterId = nanoid();\r\n  const dispatch = useDispatch();\r\n\r\n  \r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  \r\n  return (\r\n    <Container>\r\n      <TitlePage text={'Phonebook'}></TitlePage>\r\n      <Form />\r\n      {/* <Form onSubmit={addOneContact} /> */}\r\n      <Heading text={'Contacts'}></Heading>\r\n      <Filter filterId={filterId} filter={filter} />\r\n      {!loading && contacts.length > 0 && (\r\n        \r\n        <ContactList items={contacts} />\r\n      )}\r\n      {loading && <p>...loading</p>}\r\n      {error && <p>oops, something went wrong</p>}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MyContactsPage;","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["FormMarcup","styled","FormLabel","FirstInput","SecondInput","FormButton","getState","contacts","loading","error","getFilteredContacts","filter","length","items","normalisedFilter","toLowerCase","name","includes","initialState","number","Form","inputNameId","useMemo","nanoid","inputPhoneId","useSelector","dispatch","useDispatch","useForm","onSubmit","data","action","addContact","isDublicate","alert","state","handleChange","handleSubmit","htmlFor","id","type","value","onChange","pattern","title","required","ContactsList","ContactElement","DeletButton","ContactItem","text","onClick","removeContact","removeOneContact","ContactList","map","item","FilterBox","FormInput","Filter","filterId","event","target","setFilter","Container","Title","TitlePage","HeadingStyled","Heading","getFilter","store","useEffect","fetchContacts","useState","setState","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}